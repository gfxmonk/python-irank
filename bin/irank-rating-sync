#!/usr/bin/env python3

import sqlite3
import logging
import sys
import os
import optparse
import irank

from irank import Song
from irank.config import IrankOptionParser

opts = None

def load_db(path):
	db = sqlite3.connect(path)
	errors = 0
	column_names = list(map(irank.db.sanitise_column_name, irank.KEYS))
	keys = ", ".join(column_names)
	try:
		conditions = ["s.%s = u.%s" % (col, col) for col in column_names]
		conditions = " and ".join(conditions)
		if opts.verbose: print(conditions)
		db.execute("delete from updates where path in (select s.path from songs s, updates u where s.path = u.path and " + conditions + " )")
	finally:
		db.commit()
	try:
		updates = db.execute("select path, " + keys + " from updates;")
		if(opts.count):
			print(len(list(updates)))
			return
		for update in updates:
			logging.debug("fetched row: " + repr(update))
			path = update[0]
			new_values = update[1:]

			filename = os.path.basename(path)
			try:
				song = Song(path.encode("UTF-8"))

				for key, value in zip(irank.KEYS, new_values):
					old = song.values[key]
					if old == value: continue
					logging.info("updating %s [%s: %s -> %s]" % (filename, key, old, value))
					song.values[key] = value
					song.save()
				db.execute("delete from updates where path = ?", (path,))
			except Exception as e:
				if opts.verbose: raise
				errors += 1
				print("Error processing update to %s:\n    %s: %s" % ( filename, type(e).__name__, e,), file=sys.stderr)
		if(errors > 0):
			print("-------------------", file=sys.stderr)
			if not opts.no:
				if opts.yes or (input("Errors occurred. delete everything anyway? [y/N] ").lower() in ('','y','yes')):
					logging.info("removing all diff entries")
					db.execute("delete from updates;")
					return 0
			return 1
	finally:
		db.commit()

def main():
	global opts
	p = IrankOptionParser("""usage: %prog [options] /path/to/irank.sqlite

%prog reads in a modified irank.sqlite file
(as created by the android app, for example) and
attempts to apply all new ratings to the original tracks""")
	p.add_option('-y', '--yes', help="answer yes to all questions", default=False, action='store_true')
	p.add_option('-n', '--no', help="answer no to all questions", default=False, action='store_true')
	p.add_option('--count', help="print number of pending updates", default=False, action='store_true')
	opts, args = p.parse_args()

	level = logging.INFO
	if opts.verbose:
		level = logging.DEBUG
	logging.basicConfig(stream=sys.stderr, level=level, format="%(message)s")
	if len(args) != 1:
		p.print_usage()
		sys.exit(1)
	sys.exit(load_db(*args))

if __name__=='__main__':
	try:
		main()
	except (KeyboardInterrupt, EOFError):
		sys.exit(1)
